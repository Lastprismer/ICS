**********************
CS:APP数据实验室
对学生的指导
**********************

你的目标是修改你的bits.c文件，使其通过driver程序(driver.pl)中的所有测试，并获得满分。
驱动程序(driver.pl)中的所有测试，并获得满分。

***************************
1. 测试你的 bits.c 文件
***************************

我们为你提供了一些工具来测试你的 bits.c 文件中的谜题。关于如何使用这些工具的细节，请参见实验报告。

btest：这是一个链接到 bits.c 的 C 语言程序。
中的每一个函数，用大量不同的参数来调用它。
参数进行测试。Btest 是一个开始调试你的解决方案的好地方
因为它允许你一次测试一个函数，并为特定函数指定
特定函数的特定参数值。

每次修改 bits.c，你都需要重建 btest。

     unix> make 

BDD检查器：BDD检查器是一个程序，可以对你的谜题的正确性进行详尽的
BDD检查器是一个对你的谜题解决方案的正确性进行详尽检查的程序。在你完成了
在你用btest调试了你的谜题答案之后，使用BDD检查器来进行
进行权威的正确性测试。如果BDD检查器发现一个
错误，它就会向你提供给出错误答案的参数值。
错误的答案。

dlc编译器。bits.c中的每个谜题都有一个编码指南，它规定了一组有限的合法运算符。
指定了一组有限的合法运算符，允许您使用这些运算符。
的合法运算符，以及运算符的最大数量。 dlc（数据实验室
编译器）是一个C语言前端工具，用于检查每个谜题的解答是否符合编码指南。
是否符合编码指南的要求。

driver.pl：这是一个驱动程序，用于调用BDD检查器和
dlc来检查你在bits.c中的解决方案的正确性和对编程指南的遵守情况。
编程指南的正确性。它还显示你的总正确率
分数，包括正确性分数（授予只使用合法运算符的正确函数）和性能分数。
只使用合法运算符的正确函数）和性能（授予正确的
授予使用少于最大运算符数的正确函数）。	这就是
Autolab在对你提交的文件进行自动评分时使用的是相同的程序。
提交。

******************
2. 帮助程序
******************

我们已经包括了ishow和fshow程序，以帮助你解读
整数和浮点表示法。每个程序都接受一个
单个十进制或十六进制数字作为参数。要建立它们，请键入。

    unix> make

用法举例。

    unix> ./ishow 0x27
    Hex = 0x00000027, 有符号 = 39, 无符号 = 39

    unix> ./ishow 27
    Hex = 0x0000001b, 有符号 = 27, 无符号 = 27

    unix> ./fshow 0x15213243
    浮点值 3.255334057e-26
    位表示0x15213243，符号=0，指数=0x2a，分数=0x213243
    归一化。 +1.2593463659 X 2^(-85)

    linux> ./fshow 15213243
    浮点值2.131829405e-38
    Bit Representation 0x00e822bb, sign = 0, exponent = 0x01, fraction = 0x6822bb
    归一化。 +1.8135598898 X 2^(-126)

*********
3. 文件。
*********

Makefile - 编译btest、fshow和ishow。
README - 这个文件

bits.c - 你要修改和提交的文件
bits.h - 头文件

bddcheck/ - 包含BDD检查器的目录

btest.c - 主要的btest程序
  btest.h - 用于构建btest
  decl.c - 用于构建btest
  tests.c - 用于构建btest
  tests-header.c - 用于构建btest。

dlc* - 规则检查编译器二进制文件（数据实验室编译器）。	 

driver.pl* - 使用bdd检查器和dlc来自动升级bits.c的驱动程序
  Driverhdrs.pm - 驱动程序配置文件
  Driverlib.pm - 驱动程序库文件

fshow.c - 检查浮点表示法的辅助工具
ishow.c - 检查整数表示法的帮助工具



通过www.DeepL.com/Translator（免费版）翻译